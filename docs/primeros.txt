Inicial = {abstract, static, final, class, eof}
Clase = {abstract, static, final, class}
Miembro = {idClase, boolean, char, int, abstract, static, final, void, public}
AtributoMetodo = {;, (}
Metodo = {iidMetVar}
TipoMetodo = {boolean, char, int, idClase, void}
ListaArgsFormalesOpcional = {
ArgFormal =
BloqueOpcional =
ListaSentencias =
Sentencia =
Asignacion =
Llamada =
ExpresionOpcional =
Expresion =
ExpresionCompuesta =
ExpresionBasica =
Operando =
Referencia =
Primario =
AccesoVar =
LlamadaMetodo =
LlamadaMetodoEstatico =
ListaExpsOpcional =
ListaExps =


HerenciaOpcional = {extends, }
TipoPrimitivo = {boolean, char, int}
VarLocal = {var}
Return = {return}
If = {if}
Else = {else | }
While = {while}
OperadorAsignacion = {=, +=, -=}
OperadorBinario = {||, &&, ==, Â°=, <, >, <=, >=, +, -, *, /, %}
OperadorUnario = {+, ++, -, --, !}
Primitivo = {ture, false, intLiteral, charLiteral, null}
LlamadaConstructor = {new}
ExpresionParentizada = {(}
ArgsActuales = {(}
VarEncadenada = {.}
MetodoEncadenado = {.}


ListaClases = {abstract, static, final, class, }
ModificadorOpcional = {abstract, static, final, }
ListaMiembros = {idClase, boolean, char, int, abstract, static, final, void, public, 
Tipo = {boolean, char, int, idClase}
Modificador = {abstract, static, final}
Constructor = {public}
ArgsFormales = {(}
ListaArgsFormales = {boolean, char, int, idClase}
ArgFormal = {boolean, char, int, idClase}
Bloque = { { }















<Miembro> ::= <Tipo> idMetVar <AtributoMetodo> | <Modificador> <TipoMetodo> <Metodo> | void <Metodo> | <Constructor>
<AtributoMetodo> ::= ; | <ArgsFormales> <BloqueOpcional>
<Metodo> ::=  idMetVar <ArgsFormales> <BloqueOpcional>
<Modificador> ::= abstract | static | final


<AsignacionLlamada> ::= <Expresion>

<If> ::= if( <Expresion> ) <Sentencia> <Else>
<Else> ::= else <Sentencia> | 

<Expresion> ::= <ExpresionCompuesta> <ExpresionAsignacion>
<ExpresionAsignacion> ::= <OperadorAsignacion> <ExpresionCompuesta> | 

<Primario> ::= this | stringLiteral | <LlamadaConstructor> | <LlamadaMetodoEstatico> | <ExpresionParentizada> | idMetVar <AccesoVarLlamadaMetodo>
<AccesoVarLlamadaMetodo> ::= <ArgsActuales> | 